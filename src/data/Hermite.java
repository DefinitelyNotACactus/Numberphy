/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package data;

/**
 *
 * @author Pablo Suria
 */
public class Hermite extends IrregularFunction {

    /**
     * Returns the polynomial generated by the Hermite interpolation
     *
     * @param X An double array containing the X's
     * @param Y An double array containing the Y's
     * @param dif An double array containing the derivatives
     * @return An string with the polynomial
     */
    public static void interpolate(double[] X, double[] Y, double[] dif, double[] dif2) {
        double[][] matriz = new double[X.length * 3 + 1][X.length * 3 + 1];
        double[] xTri = new double[3 * X.length];
        double[] yTri = new double[3 * Y.length];
        double[] difTri = new double[3 * dif.length];
        double[] dif2Tri = new double[3 * dif2.length];

        for (int i = 0; i < X.length; i++) {
            xTri[3 * i] = X[i];
            xTri[3 * i + 1] = X[i];
            xTri[3 * i + 2] = X[i];
            yTri[3 * i] = Y[i];
            yTri[3 * i + 1] = Y[i];
            yTri[3 * i + 2] = Y[i];
            difTri[3 * i] = dif[i];
            difTri[3 * i + 1] = dif[i];
            difTri[3 * i + 2] = dif[i];
            dif2Tri[3 * i] = dif2[i];
            dif2Tri[3 * i + 1] = dif2[i];
            dif2Tri[3 * i + 2] = dif2[i];
        }

        for (int i = 0; i < xTri.length; i++) {
            matriz[i][0] = xTri[i];
            matriz[i][1] = yTri[i];
        }

        for (int col = 2; col < matriz.length; col++) {
            for (int lin = col - 1; lin < matriz.length; lin++) {

                double num = matriz[lin][col - 1] - matriz[lin - 1][col - 1];
                double den = matriz[lin][0] - matriz[lin - (col - 1)][0];

                if (num == 0 && den == 0) {
                    matriz[lin][col] = (col == 2 ? difTri[lin] : dif2Tri[lin] / 2);
                } else {
                    matriz[lin][col] = num / den;
                }
            }
        }

        double[] coeficientes = new double[xTri.length];
        for (int i = 0; i < matriz.length - 1; i++) {
            coeficientes[i] = matriz[i][i + 1];
        }
        matriz = null;
        xTri = null;
        yTri = null;
        difTri = null;
        dif2Tri = null;

        for (int i = 0; i < coeficientes.length; i++) {
            System.out.println(coeficientes[i]);
        }
        
        //falta calcular o polinomio que eu nÃ£o se bem como calcula 
    }

    public static String interpolate(double[] x, double[] y, double[] dx) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public double eval(double x) {

        //interpolate(x,X, Y, dif);
        return 0.0;
    }

}
