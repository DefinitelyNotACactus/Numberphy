/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Container;
import java.awt.event.ComponentEvent;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author david
 */
public class Description extends JPanel {

    /**
     * Creates new form Description
     */
    private Methods method;
    
    public Description(Methods method) {
        this.method = method;
        initComponents();
        loadContent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        applicationButton = new javax.swing.JButton();

        setSize(new java.awt.Dimension(613, 451));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        titleLabel.setText("Titulo");

        applicationButton.setText("Aplicacao");
        applicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(applicationButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applicationButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void applicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationButtonActionPerformed
        getParent().add(new Application(method));
        getParent().revalidate();
        getParent().remove(this);
    }//GEN-LAST:event_applicationButtonActionPerformed

    private void loadContent() {
        Container cont = new Container();
        JLabel label = new JLabel();
        label.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(ComponentEvent evt) {
                label.setText(getMethodDescription(method));
            }
        });
        label.setText(getMethodDescription(method));
        switch(method) {
            case HALLEY:
                titleLabel.setText("Metodo de Halley"); 
                break;
            case RIDDERS:
                titleLabel.setText("Metodo de Ridders");
                break;
            default:
                titleLabel.setText("This is a Title");
                break;
        }
        cont.add(label);
        cont.setLayout(new BoxLayout(cont, BoxLayout.X_AXIS));
        scrollPane.getViewport().setView(cont);
    }

    public String getMethodDescription(Methods method) {
        switch(method){
            case HALLEY:
                return ("<html><div WIDTH="+getWidth()+"><<h1 id=\"validator\">Validator</h1>\n" +
                "\n" +
                "<p>Projeto 1 de Teoria da Computação</p>\n" +
                "\n" +
                "<h2 id=\"introduo\">Introdução</h2>\n" +
                "\n" +
                "<p>Durante o primeiro estágio da cadeira de Teoria da Computação aprendemos sobre autômatos finitos e expressões regulares. O projeto deste estágio consiste em usar expressões regulares em uma linguagem de programação para verificar se algumas cadeias satisfazem certos padrões. Para implementar isso, desenvolveremos uma aplicação <b>Java</b> que receberá cadeias e fará a verificação delas com uso da biblioteca <b>java.util.regex.*</b>. A aplicação se divide entre uma classe com uma interface visual para testar as cadeias e outra para validar as cadeias recebidas.</p>\n" +
                "\n" +
                "<h2 id=\"cadeiasaseremreconhecidas\">Cadeias a serem reconhecidas</h2>\n" +
                "\n" +
                "<h3 id=\"nmerodecpf\">Número de CPF</h3>\n" +
                "\n" +
                "<p>O CPF é composto por cadeias de 3 dígitos, seguidos de ponto, mais 3 dígitos, ponto, 3 dígitos, hífen, 2 dígitos. Sua expressão regular logo é dada por:</p>\n" +
                "\n" +
                "<pre><code class=\"Java language-Java\">  String cpf_regex = \"^\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}\\\\-\\\\d{2}$\";\n" +
                "</code></pre>\n" +
                "\n" +
                "<p>O ^ no começo e $ no fim da expressão servem pra indicar que a expressão deve bater com o padrão do começo ao fim da linha de entrada.\n" +
                "Para representar os digitos usamos \\d seguido de {3} onde 3 é o número de digitos(0-9) que devem ocorrer, logo depois \\. para indicar que a cadeia deve seguir com um ponto e novamente \\d{3} para mais três digitos, \\. para outro ponto, \\d{3} para outros três dígitos, \\- para indicar que deve se seguir um hifen e por fim \\d{2} para indicar que a cadeia se encerra com dois dígitos.</p>\n" +
                "\n" +
                "<p>Depois disso é necessário compilar o padrão cpf_regex e testar com a cadeia recebida, eis o código do método, o seu retorno é um valor booleano para se a cadeia de entrada corresponde a expressão regular pedida:</p>\n" +
                "\n" +
                "<pre><code class=\"Java language-Java\">public static boolean validateCPF(String cpf) {\n" +
                "        String cpf_regex = \"^\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}\\\\-\\\\d{2}$\";\n" +
                "        Pattern pattern = Pattern.compile(cpf_regex);\n" +
                "        Matcher matcher = pattern.matcher(cpf);\n" +
                "        return matcher.matches();\n" +
                "}\n" +
                "</code></pre>\n" +
                "\n" +
                "<p>Teste com algumas cadeias:</p>\n" +
                "\n" +
                "<p align=\"center\">\n" +
                " <img src='"+ getClass().getResource("/images/NewtonMath.png" ).toString() +"'><br>\n" +
                "  Cadeia Aceita<br>\n </p>\n" +
                "</div></html>");
            default:
                return ("<html><div WIDTH="+getWidth()+"><<h1 id=\"validator\">Validator</h1>\n" +
                "\n" +
                "<p>Projeto 1 de Teoria da Computação</p>\n" +
                "\n" +
                "<h2 id=\"introduo\">Introdução</h2>\n" +
                "\n" +
                "<p>Durante o primeiro estágio da cadeira de Teoria da Computação aprendemos sobre autômatos finitos e expressões regulares. O projeto deste estágio consiste em usar expressões regulares em uma linguagem de programação para verificar se algumas cadeias satisfazem certos padrões. Para implementar isso, desenvolveremos uma aplicação <b>Java</b> que receberá cadeias e fará a verificação delas com uso da biblioteca <b>java.util.regex.*</b>. A aplicação se divide entre uma classe com uma interface visual para testar as cadeias e outra para validar as cadeias recebidas.</p>\n" +
                "\n" +
                "<h2 id=\"cadeiasaseremreconhecidas\">Cadeias a serem reconhecidas</h2>\n" +
                "\n" +
                "<h3 id=\"nmerodecpf\">Número de CPF</h3>\n" +
                "\n" +
                "<p>O CPF é composto por cadeias de 3 dígitos, seguidos de ponto, mais 3 dígitos, ponto, 3 dígitos, hífen, 2 dígitos. Sua expressão regular logo é dada por:</p>\n" +
                "\n" +
                "<pre><code class=\"Java language-Java\">  String cpf_regex = \"^\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}\\\\-\\\\d{2}$\";\n" +
                "</code></pre>\n" +
                "\n" +
                "<p>O ^ no começo e $ no fim da expressão servem pra indicar que a expressão deve bater com o padrão do começo ao fim da linha de entrada.\n" +
                "Para representar os digitos usamos \\d seguido de {3} onde 3 é o número de digitos(0-9) que devem ocorrer, logo depois \\. para indicar que a cadeia deve seguir com um ponto e novamente \\d{3} para mais três digitos, \\. para outro ponto, \\d{3} para outros três dígitos, \\- para indicar que deve se seguir um hifen e por fim \\d{2} para indicar que a cadeia se encerra com dois dígitos.</p>\n" +
                "\n" +
                "<p>Depois disso é necessário compilar o padrão cpf_regex e testar com a cadeia recebida, eis o código do método, o seu retorno é um valor booleano para se a cadeia de entrada corresponde a expressão regular pedida:</p>\n" +
                "\n" +
                "<pre><code class=\"Java language-Java\">public static boolean validateCPF(String cpf) {\n" +
                "        String cpf_regex = \"^\\\\d{3}\\\\.\\\\d{3}\\\\.\\\\d{3}\\\\-\\\\d{2}$\";\n" +
                "        Pattern pattern = Pattern.compile(cpf_regex);\n" +
                "        Matcher matcher = pattern.matcher(cpf);\n" +
                "        return matcher.matches();\n" +
                "}\n" +
                "</code></pre>\n" +
                "\n" +
                "<p>Teste com algumas cadeias:</p>\n" +
                "\n" +
                "<p align=\"center\">\n" +
                " <img src='"+ getClass().getResource("/images/NewtonGraph.png" ).toString() +"'><br>\n" +
                "  Cadeia Aceita<br>\n </p>\n" +
                "</div></html>");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applicationButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
